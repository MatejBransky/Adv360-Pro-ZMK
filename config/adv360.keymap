/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL       &kp N1           &kp N2     &kp N3    &kp N4    &kp N5  &tog 4                                                                                        &mo 1                 &kp N6  &kp N7    &kp N8     &kp N9     &kp N0          &kp MINUS
&kp TAB         &kp Q            &kp W      &kp E     &kp R     &kp T   &tog 3                                                                                        &kp LG(LC(Q))         &kp Y   &kp U     &kp I      &kp O      &kp P           &kp BSLH
&lt 3 ESC       &kp A            &kp S      &kp D     &kp F     &kp G   &kp LS(LA(LC(LGUI)))  &kp CAPSLOCK  &kp SPACE     &none  &none  &kp C_PLAY_PAUSE  &kp DELETE  &kp RS(RC(RA(RGUI)))  &kp H   &kp J     &kp K      &kp L      &kp SEMI        &lt 3 APOS
&kp LSHFT       &kp Z            &kp X      &kp C     &kp V     &kp B   &none                 &none         &kp C_VOL_UP  &none  &none  &kp C_NEXT        &none       &none                 &kp N   &kp M     &kp COMMA  &kp DOT    &kp FSLH        &kp RSHFT
&kp LEFT_ARROW  &kp RIGHT_ARROW  &kp LCTRL  &kp LALT  &kp LGUI          &mo 2                 &kp BSPC      &kp C_VOL_DN                &kp C_PREV        &kp ENTER   &lt 2 SPACE                   &kp RGUI  &kp LALT   &kp LCTRL  &kp DOWN_ARROW  &kp UP_ARROW
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                                            &trans                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                                      &bootloader             &none         &none         &none         &none         &none         &none
&none  &none         &none         &none         &none         &none         &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR  &none  &none  &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5  &none         &none         &none         &none         &none         &none
&none  &none         &none         &none         &none         &none         &none                   &none       &none  &none  &none  &none       &none       &none                   &none         &none         &none         &none         &none         &none
&none  &none         &none         &bl BL_INC    &bl BL_DEC                  &rgb_ug RGB_TOG         &bl BL_TOG  &none                &none       &bl BL_TOG  &rgb_ug RGB_TOG                       &bl BL_INC    &bl BL_DEC    &none         &none         &none
            >;
        };

        layer_symbols {
            bindings = <
&kp F11    &kp F1     &kp F2     &kp F3          &kp F4      &kp F5       &none                                                   &none   &kp F6     &kp F7     &kp F8     &kp F9     &kp F10       &kp F12
&kp PLUS   &kp KP_N1  &kp KP_N2  &kp KP_N3       &kp KP_N4   &kp KP_N5    &trans                                                  &trans  &kp KP_N6  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0     &kp UNDER
&kp EQUAL  &kp EXCL   &kp AT     &kp HASH        &kp DOLLAR  &kp PERCENT  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR      &kp MINUS
&trans     &kp GRAVE  &kp TILDE  &kp LEFT_BRACE  &kp RBRC    &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LBKT   &kp RBKT   &kp LT     &kp GT     &kp QUESTION  &trans
&trans     &trans     &trans     &trans          &trans                   &trans  &trans  &trans                  &trans  &trans  &trans             &trans     &trans     &trans     &trans        &trans
            >;
        };

        layer_nav {
            bindings = <
&kp F12      &none          &none                   &none           &none                    &kp F5                 &trans                                                        &none   &none               &none               &none             &none                &none  &none
&trans       &kp LG(W)      &kp LG(LA(LEFT_ARROW))  &kp UP_ARROW    &kp LG(LA(RIGHT_ARROW))  &kp LG(T)              &trans                                                        &none   &kp LA(LEFT_ARROW)  &kp LA(DOWN_ARROW)  &kp RA(UP_ARROW)  &kp RA(RIGHT_ARROW)  &none  &none
&trans       &kp LS(LG(T))  &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &none                  &trans     &kp BSPC   &kp DEL   &none  &none  &trans  &trans  &none   &kp LEFT_ARROW      &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT_ARROW      &none  &trans
&trans       &none          &kp LG(C)               &kp LG(X)       &kp LG(V)                &kp LA(LC(LG(LS(V))))  &none      &none      &kp HOME  &none  &none  &trans  &none   &none   &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp RG(UP_ARROW)  &kp RG(RIGHT_ARROW)  &none  &none
&kp PAGE_UP  &kp PAGE_DOWN  &none                   &none           &none                                           &kp SPACE  &kp ENTER  &kp END                 &trans  &trans  &trans                      &none               &none             &none                &none  &none
            >;
        };

        layer_numlock {
            bindings = <
&none   &none  &none  &none  &none  &none  &trans                                                                            &none      &none  &none            &none            &none            &none                &kp BACKSPACE
&none   &none  &none  &none  &none  &none  &trans                                                                            &trans     &none  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(KP_PLUS)      &none
&trans  &none  &none  &none  &none  &none  &none   &none   &none  &none  &none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none      &none  &kp KP_N4        &kp KP_N5        &kp KP_NUMBER_6  &kp KP_SUBTRACT      &kp KP_EQUAL
&none   &none  &none  &none  &none  &none  &none   &none   &none  &none  &none  &none                 &none                  &none      &none  &kp KP_N1        &kp KP_N2        &kp KP_NUMBER_3  &kp KP_DIVIDE        &none
&none   &none  &none  &none  &none         &none   &trans  &none                &kp ESCAPE            &kp KP_ENTER           &kp SPACE         &kp KP_N0        &kp KP_COMMA     &kp KP_DOT       &kp LS(KP_MULTIPLY)  &none
            >;
        };
    };
};
